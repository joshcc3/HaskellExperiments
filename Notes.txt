<LINK 1
 
   Constructing the state monad. The state monad is simply a monad
   that holds a state function. A state function is a function that
   takes a state and generates a value and a new state out of the 
   state. 
   The state monad must evidently be a functor. A functor is something
   that relates categories. It relates the Hask category with the 
   St category a sub category of Hask. It is the category that is 
   parameterized by a state. It maps tyeps from Hask to types in State.
   It maps morphisms in Hask, to morphisms in State. That is it provides
   a computational context for values.
>

<LINK 2
 the state constructor State :: (s -> (a,s)) -> St s a
 that is it takes a function that takes a state and produces
 a value and an updated state.
>

<LINK 3
 create a type class for types that define well founded orderings on instances
>

<LINK 4
   in our case of computing resources, the resource is a sequence of 
   commands. The value produced by the sequence of commands is a state function
   or a binding of variables to values the type Env
   what we want to do is given some resources and a context for consuming these 
   resources compute the result
>

<LINK 5
 the step function performs a (small step?) operation on the commands
>

<LINK 6
 What happens in the bind function is that the initial context for resource 
 utilization if by applying the resource supplied to the original context
 results in a value, we simply feed this value to the function that takes
 takes values and generates resource contexts out of them, that is the
 resource context depends on the value of another computation on a resource
 much like in function calls. 
 If the result of the first operation is a suspended computation because the 
 resources ran out, then we just return the result - the resource we have
 uptil now and the suspended computation is now the original suspended computation
 bound into the subsequent computation denoted by f
>


<LINK 7 
 Working
   (+) :: (MbT (Rdr Env) Exp) -> (MbT (Rdr Env) Exp) -> (MbT (Rdr Env) Exp)

   abs :: (MbT (Rdr Env) Exp) -> (MbT (Rdr Env) Exp)
   abs (MaybeT readerM) = MaybeT (Reader (\env -> lift (abs) (runReader readerM env)))



eval :: Exp -> Env -> (Maybe Int, Env)
eval (Var var) env 
 = (lookup var env, env)
 = (,) (lookup var env) env

let (lookup var) = g
    (,)          = h
    
eval env = h (g env) env
eval :: (Int -> Env -> (Int, Env)) -> (Env -> Int) -> (Int, Env)

Thus in this case the reader monad is environment

eval h g env = h (g env) env

instance Monad (-> r) where
(>>=) :: m a -> (a -> m b) -> m b
(>>=) :: (r -> a) -> (a -> r -> b) -> r -> b

f :: (a -> b) ->  (b -> a -> c) -> a -> c
a = r, b = a, c = b
f :: (r -> b) -> (a -> r -> b) -> r -> b

f y = h (g y) y = (>>=) g h


 = (>>=) (lookup var) (,) env

eval (Var var) = (>>=) (lookup var) (,)

Thus eval is just bind with a specific function for h and g
thus


>

< LINK 8
  We are going to try and build a resourcefule computation.
  The resourceful computation is going to get some resources and proceed
  with computation until all the resources are finished.
  data RComp r a = R (r -> (r, Either a (RComp r a)))


instance Monad (RComp r) where
--  return :: a -> RComp a
   return a = R (\c -> (c, Left a))

--   (>>=) :: RComp a -> (a -> RComp b) -> RComp b
   (>>=) (R rf) (f) = R (\c -> func (rf c) f)
     where
--func :: (Com, Either a (RComp a)) -> (a -> RComp b)->(Com, Either b (RComp b))
       func (c, Left v) f = let (R rf') = (f v) in rf' c
       func (c, Right suspended) f = (c, Right (suspended >>= f))

  This monad wraps a function that takes a resource and produces a new value
  using that resource.

  As the simplest operation we are simply going to let our resources be a number
  of computation steps remaining. The value that our function produces will be 
  an integer.

>

< LINK 9
  What this function says is that if we have more resources then take a step and return
  the result passed to us. This function seems to be acting as return.
>
